import type {
	Action,
	ActionConfig,
	CommandActionConfig,
	CustomToolActionConfig,
	SavedToolActionConfig,
	ToolActionConfig,
	Variable,
} from "@/types/database";

export interface BuildWorkspaceScriptOptions {
	actions: Action[];
	variables: Variable[];
}

const WINDOWS_LINE_ENDING = "\r\n";

const escapePowerShellArgument = (value: string): string => `'${value.replace(/'/g, "''")}'`;

const serializeWorkspaceVariables = (variables: Variable[]): string[] => {
	const activeVariables = variables.filter((variable) => variable.enabled);
	if (activeVariables.length === 0) {
		return ["# (none)"];
	}

	return activeVariables.map((variable) => {
		return `$${variable.key} = ${escapePowerShellArgument(variable.value)}`;
	});
};

const renderCommandAction = (action: Action, config: CommandActionConfig): string[] => {
	const lines: string[] = [];
	const workingDirectory = config.working_directory?.trim();

	if (workingDirectory) {
		lines.push(`# Working directory`, `Push-Location ${escapePowerShellArgument(workingDirectory)}`);
	}

	const args = config.args ?? [];
	const commandLine = [config.command, ...args].join(" ");

	lines.push(`Write-Host "Running action: ${action.name}"`, commandLine);

	if (workingDirectory) {
		lines.push("Pop-Location");
	}

	return lines;
};

const renderCustomToolAction = (
	action: Action,
	config: Extract<ToolActionConfig, { source: "custom" }> & Partial<CustomToolActionConfig>,
): string[] => {
	const lines: string[] = [];
	const workingDirectory = config.working_directory?.trim() ?? undefined;

	if (workingDirectory) {
		lines.push(`# Working directory`, `Push-Location ${escapePowerShellArgument(workingDirectory)}`);
	}

	const command = config.command ?? config.binary_path ?? "";
	const args = config.args ?? [];
	const commandLine = [command, ...args].filter(Boolean).join(" ");

	lines.push(`Write-Host "Running tool: ${action.name}"`, commandLine);

	if (workingDirectory) {
		lines.push("Pop-Location");
	}

	return lines;
};

const renderSavedToolAction = (config: SavedToolActionConfig): string[] => {
	const lines: string[] = [];
	lines.push(`# Template: ${config.template ?? "(none)"}`);

	const placeholderValues = config.placeholder_values ?? {};
	const entries = Object.entries(placeholderValues);
	if (entries.length === 0) {
		lines.push(`# No placeholder values provided`);
		return lines;
	}

	lines.push(`# Placeholder values`);
	for (const [key, value] of entries) {
		lines.push(`# ${key} = ${value ?? ""}`);
	}

	return lines;
};

const renderActionScript = (action: Action): string[] => {
	let parsedConfig: ActionConfig;
	try {
		parsedConfig = JSON.parse(action.config) as ActionConfig;
	} catch (error) {
		console.warn(`Failed to parse action config for action ${action.id}`, error);
		return [`# Unable to parse configuration for action ${action.name}`];
	}

	switch (parsedConfig.type) {
		case "command":
			return renderCommandAction(action, parsedConfig as CommandActionConfig);
		case "tool": {
			const toolConfig = parsedConfig as ToolActionConfig;
			return toolConfig.source === "custom"
				? renderCustomToolAction(action, toolConfig as CustomToolActionConfig)
				: renderSavedToolAction(toolConfig as SavedToolActionConfig);
		}
		case "delay": {
			const duration = (parsedConfig as { duration_ms?: number }).duration_ms ?? 0;
			return [`Write-Host "Delay action: ${action.name}"`, `Start-Sleep -Milliseconds ${duration}`];
		}
		default:
			return [`# Action ${action.name} (${parsedConfig.type}) is not supported in generated scripts`];
	}
};

export const buildWorkspaceScript = (options: BuildWorkspaceScriptOptions): string => {
	const { actions, variables } = options;
	const lines: string[] = [
		"# PowerShell script generated by Workspace Launcher",
		'$ErrorActionPreference = "Stop"',
		"",
		"# Workspace variables",
		...serializeWorkspaceVariables(variables),
		"",
	];

	for (const action of actions) {
		lines.push(`# Action: ${action.name}`);
		const rendered = renderActionScript(action);
		if (rendered.length > 0) {
			lines.push(...rendered);
		} else {
			lines.push(`# No script output for action ${action.name}`);
		}
		lines.push("");
	}

	return lines.join(WINDOWS_LINE_ENDING).trimEnd() + WINDOWS_LINE_ENDING;
};

export const formatScriptFilename = (workspaceName: string): string => {
	const normalized = workspaceName
		.toLowerCase()
		.replace(/[^a-z0-9]+/g, "-")
		.replace(/(^-|-$)/g, "");
	const base = normalized.length > 0 ? normalized : "workspace";
	return `${base}-actions.ps1`;
};
